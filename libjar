#!/usr/bin/env python
import sys, os, zipfile, shutil, argparse, re
from distutils import dir_util, file_util

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
parser = argparse.ArgumentParser(description='Combine files into single jar')
parser.add_argument('files',
		nargs='+', help='input files')
parser.add_argument('-o', '--out',
		default='out', help='output jar name (default: out)')
parser.add_argument('-m', '--main',
		help='Java Class containing main')

args = parser.parse_args()

TEMP = '.tmp_libjar'
try:
	shutil.rmtree(TEMP)
except OSError:
	try:
		os.remove(TEMP)
	except OSError: pass
os.mkdir(TEMP)

for arg in args.files:
	if(zipfile.is_zipfile(arg)):
		injar = zipfile.ZipFile(arg, 'r')
		print 'extracting "%s" ...' % arg,
		injar.extractall(TEMP)
		injar.close()
		print 'done'
	else:
		print 'copying "%s" ...' % arg,
		dest = os.path.join(TEMP, os.path.basename(os.path.normpath(arg)))
		if(os.path.isdir(arg)):
			dir_util.copy_tree(arg, dest)
		else:
			file_util.copy_file(arg, TEMP)
		print 'done'

found = []
def find_main(folder):
	for fn in os.listdir(folder):
		full = os.path.join(folder, fn)
		if(os.path.isdir(full)):
			find_main(full)
			continue
		f = open(full)
		data = str(f.read())
		f.close()
		if re.search('main...\(\[Ljava/lang/String;\)V', data) is not None:
			m = re.findall(TEMP + '/([^$]*?)\.class', full)
			if m:
				found.append(m[0].replace('/', '.'))

find_main(TEMP)
print found

print 'zipping as "%s.jar" ...' % args.out,
shutil.make_archive(".tmp_out", "zip", TEMP)
os.rename(".tmp_out.zip", "%s.jar" % args.out)
print 'done'
print 'cleaning up ...',
shutil.rmtree(TEMP)
print 'done'
